<launch>
      <!-- quadrotors -->
      <arg name="init_x" value="0.0"/>
      <arg name="init_y" value="0.0"/>
      <arg name="init_z" value="1.0"/> 

      <!-- rm_infantry -->
      <arg name="rm_init_x" value="8.0"/>
      <arg name="rm_init_y" value="0.0"/>
      <arg name="rm_init_angle_yaw" value="-180.0" />
      <arg name="rm_init_angle_pitch" value="-12.0" />

      <arg name="map_size_x" value="20.0"/>
      <arg name="map_size_y" value="20.0"/>
      <arg name="map_size_z" value=" 5.0"/>

      <arg name="odom_topic" value="dronesim_odom" />
      <arg name="drone_id" value="1" />

      <!-- global map  -->
      <node pkg ="map_generator" name ="random_forest" type ="random_forest" output = "screen">    
            <param name="map/x_size"     value="18" />
            <param name="map/y_size"     value="18" />
            <param name="map/z_size"     value="3" />
            <param name="map/resolution" value="0.1"/>        

            <param name="ObstacleShape/seed" value="1"/>
            
            <param name="map/obs_num"    value="10"/>
            <param name="ObstacleShape/lower_rad" value="0.5"/>   
            <param name="ObstacleShape/upper_rad" value="0.7"/>
            <param name="ObstacleShape/lower_hei" value="0.0"/>
            <param name="ObstacleShape/upper_hei" value="3.0"/>        

            <param name="map/circle_num" value="0"/>        
            <param name="ObstacleShape/radius_l" value="0.7"/>        
            <param name="ObstacleShape/radius_h" value="0.5"/>        
            <param name="ObstacleShape/z_l" value="0.7"/>        
            <param name="ObstacleShape/z_h" value="0.8"/>        
            <param name="ObstacleShape/theta" value="0.5"/>        

            <param name="sensing/radius" value="5.0"/>        
            <param name="sensing/rate"   value="1.0"/>  
            
            <param name="min_distance" value="1.2"/>         
      </node>

      <!-- local sensing -->
      <node pkg="local_sensing_node" type="pcl_render_node" name="drone_$(arg drone_id)_pcl_render_node" output="screen">
            <rosparam command="load" file="$(find local_sensing_node)/params/camera.yaml" />
            <param name="sensing_horizon"  value="5.0" />
            <param name="sensing_rate"     value="30.0"/>
            <param name="estimation_rate"  value="30.0"/>

            <param name="map/x_size"     value="$(arg map_size_x)"/>
            <param name="map/y_size"     value="$(arg map_size_y)"/>
            <param name="map/z_size"     value="$(arg map_size_z)"/>

            <remap from="~global_map" to="/map_generator/global_cloud"/>
            <remap from="~odometry"   to="/$(arg odom_topic)"/>
            <remap from="~pcl_render_node/cloud"   to="/drone_$(arg drone_id)_pcl_render_node/cloud"/>
       </node>

  <!-- trajectory server -->
      <node pkg="ego_planner" name="drone_$(arg drone_id)_traj_server" type="traj_server" output="screen">
            <!-- [DEBUG] comment the following line if not execute commands -->
            <remap from="position_cmd" to="/drone_poscmd"/>
            <remap from="~planning/trajectory" to="drone_$(arg drone_id)_planning/trajectory"/>
            <param name="traj_server/time_forward" value="1.0" type="double"/>
      </node>

      <!-- so3 control -->
      <node pkg="so3_quadrotor_simulator" type="quadrotor_simulator_so3" name="drone_sim" output="screen">
            <param name="rate/odom" value="200.0"/>
            <param name="simulator/init_state_x" value="$(arg init_x)"/>
            <param name="simulator/init_state_y" value="$(arg init_y)"/>
            <param name="simulator/init_state_z" value="$(arg init_z)"/>  
            <remap from="~odom" to="$(arg odom_topic)"/>
            <remap from="~cmd" to="so3_cmd"/>       
      </node>

      <node pkg="nodelet" type="nodelet" args="standalone so3_control/SO3ControlNodelet" name="so3_control" required="true" output="screen">
            <remap from="~odom" to="$(arg odom_topic)"/>
            <remap from="~position_cmd" to="drone_poscmd"/>
            <remap from="~motors" to="motors"/>
            <remap from="~corrections" to="corrections"/>
            <remap from="~so3_cmd" to="so3_cmd"/>
            <rosparam file="$(find so3_control)/config/gains_hummingbird.yaml"/>
            <rosparam file="$(find so3_control)/config/corrections_hummingbird.yaml"/>
            <param name="mass" value="0.98"/>
            <param name="use_angle_corrections " value="false"/>
            <param name="use_external_yaw "      value="false"/>
            <param name="gains/rot/z" value="1.0"/>    
            <param name="gains/ang/z" value="0.1"/>        
      </node>  

      

      <node pkg="odom_visualization" type="odom_visualization" name="drone_visual" output="screen">
            <remap from="~odom" to="$(arg odom_topic)"/>
            <param name="color/a" value="1.0"/>    
            <param name="color/r" value="0.0"/>        
            <param name="color/g" value="0.0"/>        
            <param name="color/b" value="1.0"/>       
            <param name="covariance_scale" value="100.0"/>       
            <param name="robot_scale" value="1.0"/>
      </node> 

      <!-- keyboard listener, which listens commands to control rm_infantry -->
      <!-- <node pkg="rm_infantry" type="rm_keyboard_joy_teleop.py" name="joy_node" /> -->

      <!-- <node pkg="joy" type="joy_node" name="joy_node"  output="screen"/> -->
      <node pkg="usercmd" type="joylistener" name="joylistener" />

      <node pkg="usercmd" type="maincmd" name="maincmd" />
      <node pkg="rm_infantry" type="rm_sim" name="rm_sim"> 
            <remap from="rmsim_gmstate" to="rm_gmstate"/>
            <remap from="rmsim_chstate" to="rm_chstate"/>
            <param name="infantry/init_x" value="$(arg rm_init_x)"/>
            <param name="infantry/init_y" value="$(arg rm_init_y)"/>
            <param name="infantry/angle_pitch" value="$(arg rm_init_angle_pitch)" />
            <param name="infantry/angle_yaw" value="$(arg rm_init_angle_yaw)" />
         
      </node>

      <node pkg="rm_infantry" type="cap_sim" name="cap_sim">
            <remap from="rmsim_chstate" to="rm_chstate"/>
            <remap from="dronesim_odom" to="dronesim_odom"/>
      </node>


      <node pkg="rm_infantry" type="rm_visual" name="rm_visual" >
            <remap from="gmstate" to="rm_gmstate"/>
      </node>


      <node pkg="rm_infantry" type="rm_firectrl" name="rm_firectrl">
            <!-- <remap from="gmstate" to="rmsim_gmstate"/> -->
      </node>
      <node pkg="bullet_traj_est" type="sim_node" name = "sim_node" output="screen">
            <param name="cam_param_yaml_path" value="$(find bullet_traj_est)/config/camera.yaml" />
            <param name="cam_hz" value="40" />
            <param name="cam_cov" value="4" />
            <param name="cam_depth_hz" value="40" />
            <param name="cam_cov_depth" value="0.1" />
      </node>
      <node pkg="bullet_traj_est" type="bullet_estimation" name = "bullet_estimation" output="screen">
            <param name="cam_param_yaml_path" value="$(find bullet_traj_est)/config/camera.yaml" />
            <remap from="/planning/trajectory" to = "/broadcast_traj_to_planner"/>
      </node>
      
      <node name="rviz" pkg="rviz" type="rviz" args="-d $(find bullet_traj_est)/launch/sim_drone.rviz" required="true" />

      <!-- ego planner -->
      <include file="$(find ego_planner)/launch/advanced_param.xml">

            <arg name="drone_id" value="$(arg drone_id)"/>

            <arg name="map_size_x_" value="$(arg map_size_x)"/>
            <arg name="map_size_y_" value="$(arg map_size_y)"/>
            <arg name="map_size_z_" value="$(arg map_size_z)"/>
            <arg name="odometry_topic" value="$(arg odom_topic)"/>

            <arg name="obj_num_set" value="5" />

            <!-- camera pose: transform of camera frame in the world frame -->
            <!-- depth topic: depth image, 640x480 by default -->
            <!-- don't set cloud_topic if you already set these ones! -->
            <arg name="camera_pose_topic" value="pcl_render_node/camera_pose"/>
            <arg name="depth_topic" value="pcl_render_node/depth"/>

            <!-- topic of point cloud measurement, such as from LIDAR  -->
            <!-- don't set camera pose and depth, if you already set this one! -->
            <arg name="cloud_topic" value="pcl_render_node/cloud"/>

            <!-- intrinsic params of the depth camera -->
            <arg name="cx" value="321.04638671875"/>
            <arg name="cy" value="243.44969177246094"/>
            <arg name="fx" value="387.229248046875"/>
            <arg name="fy" value="387.229248046875"/>

            <!-- maximum velocity and acceleration the drone will reach -->
            <arg name="max_vel" value="4.0" />
            <arg name="max_acc" value="10.0" />

            <!--always set to 1.5 times grater than sensing horizen-->
            <arg name="planning_horizon" value="7.5" /> 

            <arg name="use_distinctive_trajs" value="false" />

            <!-- 1: use 2D Nav Goal to select goal  -->
            <!-- 2: use global waypoints below  -->
            <arg name="flight_type" value="2" />
            
            <!-- global waypoints -->
            <!-- It generates a piecewise min-snap traj passing all waypoints -->
            <arg name="point_num" value="3" />

            <arg name="point0_x" value="6.0" />
            <arg name="point0_y" value="0.0" />
            <arg name="point0_z" value="1.0" />

            <arg name="point1_x" value="3.0" />
            <arg name="point1_y" value="3.0" />
            <arg name="point1_z" value="1.0" />

            <arg name="point2_x" value="0.0" />
            <arg name="point2_y" value="0.0" />
            <arg name="point2_z" value="1.0" />

            <arg name="point3_x" value="0.0" />
            <arg name="point3_y" value="0.0" />
            <arg name="point3_z" value="1.0" />

            <arg name="point4_x" value="-15.0" />
            <arg name="point4_y" value="0.0" />
            <arg name="point4_z" value="1.0" />     
      </include>

</launch>
